microservices:
  sample-project-frontend:
    repo : https://github.com/punkrockio/SampleProject_frontend.git
    image:
      dockerfile: Dockerfile
    environment:
      FRONTEND_SERVICE_NAME : http://sample-project-frontend
      GATEWAY_URL: http://sample-project-gateway
      SELENIUM_HUB_URL: http://browser_automation_tests:24444/wd/hub
    depends_on:
      # - sample-project-gateway

  sample-project-gateway:
    repo : https://github.com/punkrockio/SampleProject_gateway.git
    image:
      dockerfile: Dockerfile
    environment:
      BACKEND_API_URL: http://sample-project-backend
    depends_on:
      - sample-project-backend

  sample-project-backend:
    repo : https://github.com/punkrockio/SampleProject_backend.git
    image:
      dockerfile: Dockerfile
    environment:
      DB_DIALECT : mysql
      DB_HOST : sample-mysql
      DB_PORT : 3306
      DB_NAME : backend_api_db
      DB_USERNAME : root
      DB_PASSWORD : mypassword
    depends_on:
      - sample-mysql

  sample-mysql:
    image : mysql:5.7 # Pull from docker hub if string
    environment:
      MYSQL_ROOT_PASSWORD: mypassword
      MYSQL_DATABASE : sample-mysql-db
    healthcheck:
      test : "mysql -u root -pmypassword -h localhost -e exit"
      interval: 2s
      timeout: 2s
      retries: 30
      start_period: 20s

  browser_automation_tests:
    image: superlogical/docker_bowser_automation
    environment:
      NOVNC: 'true'
      VIDEO_CONVERSION_MAX_WAIT: 600s
    healthcheck:
      test : "wait_all_done 1s"
      interval : 20s
      retries: 10
      start_period: 30s

  backstop_css_tests:
    image: domnom/backstopjs-environment

      

builds:
  app_environments:
    dev:
      docker-compose: docker-compose.dev.yml
    testing:
      suites:

      # -- For CI Mocha testing -- #
        mocha_test:
          microservices:
            sample-project-frontend:
            sample-project-gateway:
          steps:
          - Frontend echo:
            sample-project-frontend:
            - echo "frontend echo"
          - Gateway echo:
            sample-project-gateway:
            - echo "gateway echo"


      # --- First suite -- #
        backend_only:
          microservices:
            sample-project-backend:
              environment:
                DB_NAME: backend_testing_db
            sample-mysql:
              environment:
                MYSQL_DATABASE : backend_testing_db
          steps:
          - Check the backend:
              sample-project-backend:
              - ./node_modules/.bin/sequelize db:migrate
              - npm test

        gw_and_backend:
          microservices:
            sample-project-gateway:
              environment:
            sample-project-backend:
              environment:
                DB_NAME: backend_testing_db
            sample-mysql:
              environment:
          steps:
          - 1 check the backend:
              sample-project-backend:
              - npm test
              sample-project-gateway:
              - echo "gateway test 1"
              - echo "gateway test 2"
          - 2 check the gateway:
              sample-project-backend:
              - echo "backend test 1"
              - echo "backend test 2"
              sample-project-gateway:
              - npm test

      # --- Second suite -- #
        full_stack:
          microservices:
            sample-project-frontend:
            sample-project-gateway:
            sample-project-backend:
              environment:
                DB_NAME: backend_testing_db
            sample-mysql:
              environment:
                MYSQL_DATABASE: backend_testing_db
          steps:
          - step 1:
              sample-project-backend:
              - ./node_modules/.bin/sequelize db:migrate
          - step 2:
              sample-project-backend:
              - npm test
              - echo "substep 2 sample-project-backend"
              sample-project-gateway:
              - npm test
              - echo "substep 2 sample-project-gateway"
              - echo "substep 3 sample-project-gateway"
              sample-project-frontend:
              - npm test

    staging:
      suites:
        frontend_only:
          microservices:
            sample-project-frontend:
              expose_port: 
              - port : 80 
            browser_automation_tests:
              expose_port:
              - port : 24444
                dns  : hub
              - port : 26080
                dns  : vnc
            backstop_css_tests:
              copy_data:
                sample-project-frontend:
                - /usr/src/app/test/backstop_tests:/usr/src/tests  # sample-project-frontend path : backstop_css_tests path (absolute paths)
          steps:
          # - Start recording:
          #     browser_automation_tests:
          #     - start-video
          - Css testing:
              backstop_css_tests:
              - backstop test --config backstop_tests/backstop.js
          # - Browser testing:
          #     sample-project-frontend:
          #     - mocha -t 100000
          # - Stop recording:
          #     browser_automation_tests:
          #     - stop-video
        full_stack:
          microservices:
            sample-project-frontend:
              expose_port: 
              - port : 80 # If this is set then this will be accessible through the web --expose and --label traefik.port=80
            sample-project-gateway:
              expose_port: 
              - port : 80
                dns : my.80
              - port: 678
            browser_automation_tests:
              expose_port:
              - port : 24444
              - port : 26080
            sample-project-backend:
              environment:
                DB_NAME: staging_fullstack_db
            sample-mysql:
              environment:
                MYSQL_DATABASE: staging_fullstack_db
          steps:
          - Migrations and seeding:
              sample-project-backend:
              - ./node_modules/.bin/sequelize db:migrate
          - Frontend tests:
              sample-project-frontend:
              - npm test
    production:
